---
const {text = "Animated Text", Tag = 'span'} = Astro.props;
---

<div class="Animated-text-2" data-text={text} style="visibility: hidden;">

    <Tag class="text-wrapper">
        {
            text.split(' ').map((word, index) => {

                return <Fragment>
                    <span class="word">
                        {
                            [...word].map(letter => {
                                return <span class="letter">{letter}</span>;
                            })
                        }
                    </span>
                </Fragment>            
            })
        }
    </Tag>

</div>

<script>

    import anime from "animejs";
    
    document.querySelectorAll('.Animated-text-2').forEach((element) => {

        const animation = anime
        .timeline({
            loop: false,
            autoPlay: false
        })
        .add({
            targets: element.querySelectorAll('.letter'),
            translateX: [40,0],
            translateZ: 0,
            opacity: [0,1],
            easing: "easeOutExpo",
            duration: 1200,
            delay: (_, i) => 100 + 30 * i
        });

        const observer = new IntersectionObserver(([entry]) => {

            if(entry.isIntersecting){

                element.style.visibility = '';

                animation.play();

                observer.disconnect();
            }

        }, {root: null, threshold: 1.0, rootMargin: '0px'});

        observer.observe(element);
    });

</script>

<style>
    .Animated-text-2 {

        position: relative;


        .text-wrapper {
            position: relative;
            display: inline-block;
            padding-top: 0.2em;
            padding-right: 0.05em;
            padding-bottom: 0.1em;
            overflow: hidden;
        }

        .word {
            display: inline-block;
            white-space: nowrap;
        }
        .letter {
            display: inline-block;
            line-height: 1em;
        }
    }

</style>